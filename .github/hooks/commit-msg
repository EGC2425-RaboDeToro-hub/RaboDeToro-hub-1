#!/bin/bash
# Hook para validar el mensaje del commit

set -e

# Leer el mensaje de commit del archivo proporcionado
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Función para validar el mensaje de commit
validate_commit_message() {
    local message=$1

    echo "Validando mensaje de commit..."
    echo "Mensaje recibido:"
    echo "$message"
    echo ""

    # Ignorar mensajes de merge
    if [[ "$message" =~ ^[Mm]erge ]]; then
        echo "El commit es un merge y será aceptado automáticamente."
        return 0
    fi

    # Validar separación entre asunto y cuerpo
    if ! echo "$message" | grep -Pzo "(?s)^[^\n]+\n\n[^\n]+"; then
        echo "Error: El mensaje de commit debe separar el asunto y el cuerpo con una línea en blanco."
        echo "Ejemplo válido:"
        echo "feat: Añadir funcionalidad X\n\nDescripción detallada del cambio."
        exit 1
    fi

    # Extraer el asunto (primera línea)
    local subject=$(echo "$message" | head -n 1)

    # Validar que el asunto no esté vacío
    if [ -z "$subject" ]; then
        echo "Error: El asunto del commit está vacío."
        exit 1
    fi

    # Validar longitud del asunto
    if [ ${#subject} -gt 50 ]; then
        echo "Error: La línea del asunto debe tener un máximo de 50 caracteres."
        exit 1
    fi

    # Validar que el asunto no termine con un punto
    if [[ "$subject" =~ \.$ ]]; then
        echo "Error: La línea del asunto no debe terminar con un punto."
        exit 1
    fi

    # Validar prefijos permitidos
    if ! echo "$subject" | grep -Eq "^(feat|fix|docs|style|test):"; then
        echo "Error: El asunto debe comenzar con uno de los prefijos permitidos (feat, fix, docs, style, test)."
        exit 1
    fi

    echo "El mensaje del commit es válido."
    return 0
}

# Llamar a la función de validación con el mensaje de commit
validate_commit_message "$COMMIT_MSG"
